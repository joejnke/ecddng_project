#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 18, 2019 12:46:54 AM EAT  platform: Linux

import sys
import ecddng_object_detection as ecdod

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import ecda_support
import os.path
from tkinter import filedialog
from PIL import Image, ImageTk

ckt_image = None
box_coord = None
box_class = None


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    print('prog_call = {}'.format(prog_call))
    prog_location = os.path.split(prog_call)[0]
    print('prog_location = {}'.format(prog_location))
    sys.stdout.flush()
    root = tk.Tk()
    top = ecda_gui(root)
    ecda_support.init(root, top)
    root.mainloop()


w = None


def create_ecda_gui(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    print('prog_call = {}'.format(prog_call))
    prog_location = os.path.split(prog_call)[0]
    print('prog_location = {}'.format(prog_location))
    rt = root
    w = tk.Toplevel(root)
    top = ecda_gui(w)
    ecda_support.init(w, top, *args, **kwargs)
    return w, top


def destroy_ecda_gui():
    global w
    w.destroy()
    w = None


class ecda_gui:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font9 = "-family {gothic} -size 9"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        self.top = top
        self.top.geometry("934x504+284+162")
        self.top.title("Schematic Detector")
        self.top.configure(background="#1f2b54")

        self.schematic_img_frame = tk.LabelFrame(self.top)
        self.schematic_img_frame.place(relx=0.021, rely=0.02, relheight=0.843
                                       , relwidth=0.642)
        self.schematic_img_frame.configure(relief='groove')
        self.schematic_img_frame.configure(font=font9)
        self.schematic_img_frame.configure(text='''Schematic''')
        self.schematic_img_frame.configure(width=600)

        self.image_lbl = tk.Label(self.schematic_img_frame)
        self.image_lbl.place(relx=0.017, rely=0.071, height=375, width=569
                             , bordermode='ignore')
        self.image_lbl.configure(width=569)

        self.browse_btn = tk.Button(self.top)
        self.browse_btn.place(relx=0.118, rely=0.913, height=25, width=140)
        self.browse_btn.configure(text='''Browse''')
        self.browse_btn.configure(command=lambda: self.open_image())
        self.browse_btn.configure(width=140)

        self.process_btn = tk.Button(self.top)
        self.process_btn.place(relx=0.332, rely=0.913, height=25, width=110)
        self.process_btn.configure(text='''Process''')
        self.process_btn.configure(command=lambda: self.process_ckt())
        self.process_btn.configure(width=110)

        self.simulate_btn = tk.Button(self.top)
        self.simulate_btn.place(relx=0.516, rely=0.913, height=25, width=110)
        self.simulate_btn.configure(text='''Simulate''')
        self.simulate_btn.configure(command=lambda: self.simulate_ckt())
        self.simulate_btn.configure(width=110)

        self.btn_sprtr = ttk.Separator(self.top)
        self.btn_sprtr.place(relx=0.3, rely=0.893, relheight=0.079)
        self.btn_sprtr.configure(orient="vertical")

        self.btn_sprtr2 = ttk.Separator(self.top)
        self.btn_sprtr2.place(relx=0.484, rely=0.893, relheight=0.079)
        self.btn_sprtr2.configure(orient="vertical")

        self.frame_sprtr = ttk.Separator(self.top)
        self.frame_sprtr.place(relx=0.707, rely=0.06, relheight=0.754)
        self.frame_sprtr.configure(orient="vertical")

        self.component_detail = tk.Message(self.top)
        self.component_detail.place(relx=0.728, rely=0.079, relheight=0.688
                                    , relwidth=0.247)
        self.component_detail.configure(text='''Message''')
        self.component_detail.configure(width=231)

        #initializing the detection model

        self.MODEL_PATH = '/home/kira/cloned/tensorflow object detection API/models/research/object_detection/rlc_graph'
        self.PATH_TO_LABELS = '/home/kira/cloned/tensorflow object detection API/models/research/object_detection/training/object-detection.pbtxt'
        global ckt_image
        self.object_detector = ecdod.ecddng_obj_detection(MODEL_PATH=self.MODEL_PATH, PATH_TO_LABELS=self.PATH_TO_LABELS, NUM_CLASSES=3)

        # end of model initialization

    def open_image(self):
        global ckt_image
        ckt_image = filedialog.askopenfilename(
            initialdir="/home/kira/cloned/tensorflow object detection API/models/research/object_detection/test_images",
            title="Select circuit image", filetypes=(("jpeg", "*.jpg"), ("All files", "*.*")))
        unresized = Image.open(ckt_image)
        image_path = ImageTk.PhotoImage(unresized.resize((560, 370), Image.ANTIALIAS))
        self.image_lbl.configure(image=image_path)
        self.image_lbl.pack(self, expand=1)
        self.schematic_img_frame.pack_propagate(1)
        self.schematic_img_frame.pack()

    def process_ckt(self):
        global ckt_image, box_coord, box_class
        image = Image.open(ckt_image)
        # the array based representation of the image will be used later in order to prepare the
        # result image with boxes and labels on it.
        image_np = self.object_detector.load_image_into_numpy_array(image)
        # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
        # image_np_expanded = np.expand_dims(image_np, axis=0)
        # Actual detection.
        self.object_detector.load_frozen_tf_model()

        output_dict = self.object_detector.run_inference_for_single_image(image_np, self.object_detector.detection_graph)
        # Visualization of the results of a detection.
        _, box_class = self.object_detector.visualize_boxes_and_labels_on_image_array(detection_output_dict=output_dict, image_np= image_np)

        comp_detail_msg = ""
        for box_coordinate, component_class in box_class.items():
            comp_detail_msg += str(component_class) + "\n" + str(box_coordinate) + "\n\n"

        self.component_detail.configure(text=comp_detail_msg)
        self.component_detail.pack_propagate(1)

        unresized = Image.fromarray(image_np)
        image_path = ImageTk.PhotoImage(unresized.resize((560, 370), Image.ANTIALIAS))
        self.image_lbl.configure(image=image_path)
        self.image_lbl.pack(self, in_=self.schematic_img_frame)
        self.schematic_img_frame.pack_propagate(1)
        self.schematic_img_frame.pack(in_=self.top)
        self.component_detail.pack(in_=self.top)

    def simulate_ckt(self):
        #TODO : run the cir file generated for the ngspice and display the output result on a separate window or on this GUI.
        pass


if __name__ == '__main__':
    vp_start_gui()